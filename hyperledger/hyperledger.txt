
[名词解析]
成员服务提供者 MSP

docker  docker.io 
/etc/init.d/docker start
https://github.com/hyperledger/fabric.git
https://github.com/hyperledger/fabric-samples.git
https://hyperledgercn.github.io/hyperledgerDocs/
https://github.com/hyperledger/fabric-sdk-java
//中文官网文档
byfn.sh -m generate
./byfn.sh -m up
./byfn.sh -m down
peer chaincode install -n <chaincode_name> -v 1.0 -p
github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02
peer chaincode install -n mycc -v 1.0 -p
/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02
docker exec -it cli bash
docker logs -f cli

peer chaincode install -n mycc -v 1.0 -p
github.com/chaincode/chaincode_example02/go/
peer chaincode install -n mychannel -v 1.0 -p
github.com/chaincode/chaincode_example02/go/

小蚁币
http://www.xtecher.com/Mobile/Project/view?pid=1127
https://neo.org/
http://antcha.in/blocks
Harbor 

[cryptogen tool not found. exiting]
bash bootstrap-1.0.0-rc1.sh 

docker-compose -f docker-compose-cli.yaml up -d

/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
/root/fabric-samples/basic-network/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

docker rm -f $(docker ps -aq)

     export CHANNEL_NAME=mychannel
      
      peer chaincode query -C $CHANNEL_NAME -n mycc -c
      '{"Args":["query","a"]}'
#创建通道

      peer channel create -o orderer.example.com:7050 -c $CHANNEL_NAME -f
      ./channel-artifacts/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile
      /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

      查看链码日志
       docker logs dev-peer0.org2.example.com-mycc-1.0

        /bin/bash -c './scripts/script.sh mychannel ${DELAY}; sleep 60'
? 链码服务

Dockerfile中的指令与本地编译过程十分类似，这里给笔者编写的fabric-baseimage镜像、fabric-peer镜像、fabric-orderer镜像等关键镜像的Dockerfile，供读者参考使用。 
1）fabric-baseimage镜像 
fabric-baseimage镜像的参考Dockerfile如下，基于golang:1.8镜像生成，可以作为Go链码容器的基础镜像。该镜像中包含了Farbic相关的代码，并安装了一些有用的工具，包括chaintools、gotools、configtxgen、configtxlator和cryptogen等。 
该Dockerfile也可以从https://github.com/yeasy/docker-hyperledger-fabric-base下载获取 
2)fabric-peer镜像 
fabric-peer镜像基于fabric-baseimage生成，编译安装了peer命令。参考Dockerfile可以从https://github.com/yeasy/docker-hyperledger-fabric-peer下载获取 
3)fabric-orderer镜像 
fabric-orderer镜像基于fabric-baseimage生成，编译安装了orderer命令。参考Dockerfile可以从https://github.com/yeasy/docker-hyperledger-fabric-orderer下载获取 
4)fabric-ca镜像 
读者可以参考如下Dockerfile内容，生成fabric-ca镜像。参考Dockerfile可以从https://github.com/yeasy/docker-hyperledger-fabric-ca下载获取
